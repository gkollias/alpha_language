dispatcher:
->number_tostring(.4f)

void libfunc_objectmemberkeys(void)
{
	avm_table* newtable = avm_tablenew();
	int i=0;
	unsigned n;
	avm_memcell* tmp;
	avm_table_bucket* chief;

	avm_memcell* cntr =(avm_memcell*)malloc(sizeof(avm_memcell));

	cntr->type = number_m;
	cntr->data.numVal = 0;

	n = avm_totalactuals();
	if(n!=1)
	{
		printf("one argument [not %d] expected in 'objectmemberkeys'!\n",n);
		retval.type = nil_m;
	}
	else
	{
		tmp = avm_getactual(n-1);
	
		assert(tmp->type == table_m);

		for(i=0;i<AVM_TABLE_HASHSIZE;i++)
		{
			chief = tmp->data.tableVal->numIndexed[i];

			while(chief)
			{
				avm_tablesetelem(newtable,cntr,&chief->key);
				cntr->data.numVal++;
				chief =chief->next;
			}
		}
		for(i=0;i<AVM_TABLE_HASHSIZE;i++)
		{
			chief = tmp->data.tableVal->strIndexed[i];

			while(chief)
			{	
				avm_tablesetelem(newtable,cntr,&chief->key);
				cntr->data.numVal++;
				chief =chief->next;
			}
		}
	}

	retval.type = table_m;
	retval.data.tableVal = newtable;


}

void libfunc_objectcopy(void)
{

	avm_table* newtable = avm_tablenew();
	int i=0;
	unsigned n;
	avm_memcell* tmp;
	avm_table_bucket* chief;

	n = avm_totalactuals();
	if(n!=1)
	{
		printf("one argument [not %d] expected in 'objectcopy'!\n",n);
		retval.type = nil_m;
	}
	else
	{
		tmp = avm_getactual(n-1);
	
		assert(tmp->type == table_m);

		for(i=0;i<AVM_TABLE_HASHSIZE;i++)
		{
			chief = tmp->data.tableVal->numIndexed[i];

			while(chief)
			{
				avm_tablesetelem(newtable,&chief->key,&chief->value);
				chief =chief->next;
			}
		}
		for(i=0;i<AVM_TABLE_HASHSIZE;i++)
		{
			chief = tmp->data.tableVal->strIndexed[i];

			while(chief)
			{	
				avm_tablesetelem(newtable,&chief->key,&chief->value);
				chief =chief->next;
			}
		}
	}

	retval.type = table_m;
	retval.data.tableVal = newtable;

}
void libfunc_argument(void){
	
	unsigned address;
	unsigned n = avm_totalactuals();
	unsigned p_topsp = avm_get_envvalue(topsp + AVM_SAVEDTOPSP_OFFSET);
	avm_memcell* tmp;
	
	avm_memcellclear(&retval);
	
	if(!p_topsp)
	{
		printf("'argument' called outside a function!\n");
		executionFinished = 1;
		retval.type = nil_m;
	}
	if(n!=1)
	{
		printf("one argument [not %d] expected in 'argument'!\n",n);
		retval.type = nil_m;
	}
	else
	{
		/*Extract the number of actual arguments
		for the previous activation record*/

		tmp = avm_getactual(0);
		assert(tmp->type ==number_m);
		n = tmp->data.numVal;
		avm_assign(&retval,&stack[p_topsp + AVM_STACKENV_SIZE + 1 + n]);
	}

}

/* Implementation of the library func input
it returns the value given as input by user*/

void libfunc_input(void)
{

	unsigned n;
	char* in;
	int i,digit=1;
	int uminus = 1;
	int dotcntr = 0;

	avm_memcell* tmp;

	n = avm_totalactuals();

	if(n!=0)
	{
		printf("'input' takes no arguments!\n",n);
	}
	else
	{
		in = (char *)malloc(140);
		scanf("%s",in);

		if(!strcmp(in,"true"))
		{
			retval.type = bool_m;
			retval.data.boolVal = 1;
		}
		else if(!strcmp(in,"false"))
		{
			retval.type = bool_m;
			retval.data.boolVal = 0;
		}
		else if(!strcmp(in,"nil"))
		{
			retval.type = nil_m;
		}
		else
		{

			for(i=0;i<strlen(in);i++)
			{
			
				if(uminus)
				{
					if(in[0]=='-')
					{
						uminus = 0;
						if(strlen(in)==1)
						{
							digit = 0;
							break;
						}
						continue;
					}
				}
				if(in[i]=='.' && i!=strlen(in)-1)
				{
					++dotcntr;
					continue;
				}
			
				if(!isdigit(in[i]))
				{
					digit = 0;
					break;
				}
			}

			if(dotcntr > 1)
				digit = 0; 
			
			if(digit)
			{
				retval.type = number_m;
				retval.data.numVal = atof(in);
			}
			else
			{
				retval.type = string_m;
				retval.data.strVal = strdup(in);
			}
	
		}
	}

}


--Na simplirwsw elenxous gia orismata libfunctions!!

--AVM.c :avm_tablesetelem:
-allagi opu xreiazetai me temp->next
-if(index->type == number_m || index->type == bool_m) 
	{ 
		if(index->type == number_m)
			id = numHash( index->data.numVal );
		else
			id = numHash( index->data.boolVal );

-else:printf("Wrong type used as an index!\n");

dis.c:"execute jne vgazw to !"

allagi executionFinished se type = nil_m

stin input--atof kai elenxos gia(.-)

target.c:generate_OR(l-610)
	i = instruction_malloc();
	i->arg1 = new_vmarg_void();
	i->arg2 = new_vmarg_void();
	i->result = new_vmarg_void();
	i->opcode = VM_JEQ;
	make_operand(q->arg2, i->arg1);
	make_bool_operand(i->arg2, B_TRUE);
	i->result->type = label_a;
	i->result->val  = currInstruction + 3;
	t_emit(i);
kai antistoixa B_FALSE gia AND!